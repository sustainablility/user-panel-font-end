{"version":3,"sources":["lib/getUserTokenFromCookie.js","config.js","lib/getUserInfoByUserToken.js","component/datasetDIsplay/OneDataset.js","component/datasetDIsplay/DatasetDisplay.js","component/procedureDIsplay/OneProcedure.js","component/procedureDIsplay/ProcedureDisplay.js","comunicateToServer/addUserProcedure.js","component/procedureDIsplay/addProcedure.js","App.js","serviceWorker.js","index.js"],"names":["getUserToken","cname","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","getUserInfoByUserTokenUrl","addProcedureUrl","token","a","axios","get","params","catch","err","undefined","response","status","data","getUserInfoByUserToken","OneDataset","dataset","this","props","href","React","Component","DatasetDisplay","datasetList","datasetDisplay","push","datasetName","OneProcedure","procedure","target","ProcedureDisplay","procedureList","procedureDisplay","procedureName","userToken","postBody","JSON","stringify","post","headers","console","log","addUserProcedure","AddProcedure","procedureNameInputValue","getElementById","value","window","location","reload","id","type","onClick","afterClick","App","state","loaded","init","getUserTokenFromCookie","alert","userInfo","setState","renderItem","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1dc954d.chunk.js","sourcesContent":["function getCookie(cname) {\n    let name = cname + \"=\";\n    let decodedCookie = decodeURIComponent(document.cookie);\n    let ca = decodedCookie.split(';');\n    for(let i = 0; i <ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return null;\n}\n\nfunction getUserToken() {\n    return getCookie(\"userToken\");\n}\n\nexport default getUserToken;","export let getUserInfoByUserTokenUrl = \"http://127.0.0.1:8888/fontend/userinfo\";\nexport let indexURL = \"http://127.0.0.1\";\nexport let procedureEditorUrl = \"http://127.0.0.1:3001?procedure=\";\nexport let addProcedureUrl = \"http://127.0.0.1:23232/addProcedure\";","import axios from \"axios\";\nimport {getUserInfoByUserTokenUrl} from \"../config\";\n\nasync function getUserInfoByUserToken(token) {\n    let response = await axios.get(getUserInfoByUserTokenUrl, {\n        params: {\n            token: token\n        }\n    }).catch(err => {});\n    if (response === undefined) {\n        return null;\n    }\n    if (response.status !== 200) {\n        return null;\n    }\n    if (response.data === \"\") {\n        return null;\n    }\n    return response.data;\n}\n\nexport default getUserInfoByUserToken;","import React from 'react';\n\nclass OneDataset extends React.Component{\n    render() {\n        let dataset = this.props[\"datasetName\"];\n        return <div><a href={\"test\"}>{dataset}</a></div>;\n    }\n}\nexport default OneDataset;","import React from 'react';\nimport OneDataset from './OneDataset';\n\nclass DatasetDisplay extends React.Component {\n    render() {\n        let datasetList = this.props[\"dataset\"];\n        let datasetDisplay = [];\n        for (let dataset of datasetList) {\n            datasetDisplay.push(\n                <OneDataset datasetName={dataset}/>\n            );\n        }\n        return datasetDisplay;\n    }\n}\n\nexport default DatasetDisplay;","import React from 'react';\nimport {procedureEditorUrl} from \"../../config\";\n\nclass OneProcedure extends React.Component{\n    render() {\n        let procedure = this.props[\"procedureName\"];\n        return <div><a target={\"_blank\"} href={procedureEditorUrl + procedure}>{procedure}</a></div>;\n    }\n}\nexport default OneProcedure;","import React from 'react';\nimport OneProcedure from './OneProcedure';\n\nclass ProcedureDisplay extends React.Component {\n    render() {\n        let procedureList = this.props[\"procedure\"];\n        let procedureDisplay = [];\n        for (let dataset of procedureList) {\n            procedureDisplay.push(\n                <OneProcedure procedureName={dataset}/>\n            );\n        }\n        return procedureDisplay;\n    }\n}\n\nexport default ProcedureDisplay;","import axios from 'axios';\nimport {addProcedureUrl} from \"../config\";\n\nasync function addUserProcedure(procedureName,userToken) {\n    let postBody = JSON.stringify({\n        procedureName: procedureName,\n        userToken: userToken\n    });\n    let response = await axios.post(addProcedureUrl, postBody, {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (response === undefined) {\n        return false;\n    }\n    console.log(response);\n    if (response.data != 1) {\n        return false;\n    }\n    return true;\n}\n\nexport default addUserProcedure;","import React from 'react';\nimport addUserProcedure from '../../comunicateToServer/addUserProcedure'\n\nclass AddProcedure extends React.Component{\n\n    async afterClick(userToken) {\n        let procedureNameInputValue = document.getElementById(\"user-panel-addprocedure-text\").value;\n        let addProcedureResult = await addUserProcedure(procedureNameInputValue, userToken);\n        if (addProcedureResult) {\n            window.location.reload();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <input id={\"user-panel-addprocedure-text\"} type={\"text\"}/>\n                <button onClick={() => this.afterClick(this.props[\"userToken\"])}>Add new procedure</button>\n            </div>\n        );\n    }\n}\n\nexport default AddProcedure;","import React from 'react';\n\nimport getUserTokenFromCookie from './lib/getUserTokenFromCookie'\nimport getUserInfoByUserToken from './lib/getUserInfoByUserToken'\nimport DatasetDisplay from './component/datasetDIsplay/DatasetDisplay'\nimport ProcedureDisplay from \"./component/procedureDIsplay/ProcedureDisplay\";\nimport setCookie from \"./lib/setCookieForTesting\";\nimport AddProcedure from \"./component/procedureDIsplay/addProcedure\";\nimport {indexURL} from './config';\n\nclass App extends React.Component{\n    state = {\n        loaded: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.init();\n\n    }\n\n    async init() {\n        let userToken = await getUserTokenFromCookie();\n        if (userToken === null) {\n            console.log(\"user token not found\");\n            window.alert(\"Please Login\");\n            window.location.href = indexURL\n        }\n        let userInfo = await getUserInfoByUserToken(userToken);\n        if (userInfo === null) {\n            console.log(\"Token Expired\");\n            window.alert(\"Please Login\");\n            window.location.href = indexURL\n        }\n        this.userInfo = userInfo;\n        this.setState({userToken: userToken});\n        this.setState({loaded: true})\n    }\n\n    componentDidMount() {\n\n    }\n\n\n    render() {\n        if (!this.state.loaded) {\n            return (<div>Loading</div>);\n        }\n        let renderItem = [];\n        renderItem.push(\n            <div>\n                <div>Dataset: </div>\n                <DatasetDisplay dataset={this.userInfo[\"databases\"]}/>\n            </div>\n        );\n\n        renderItem.push(\n            <div>\n                <div>Procedure: </div>\n                <AddProcedure userToken={this.state.userToken}/>\n                <ProcedureDisplay procedure={this.userInfo[\"procedures\"]}/>\n            </div>\n        );\n        return renderItem;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}